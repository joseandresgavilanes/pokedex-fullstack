{
    "swagger": "2.0",
    "info": {
    "description": "This is a Pokedex server. For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "Pokedex API",
    "contact": {
    "email": "joseandresgavilanes2012@gmail.com"
    }
    },
    "host": "localhost:3000",
    "basePath": "/api/v1",
    "tags": [
    {
    "name": "pokemons",
    "description": "Everything about pokemons"
    },
    {
    "name": "types",
    "description": "Everything about types"
    },
    {
    "name": "users",
    "description": "Operations about users"
    }
    ],
    "schemes": [
    "https",
    "http"
    ],
    "paths": {
    "/pokemons": {
    "post": {
    "tags": [
    "pokemons"
    ],
    "summary": "Add a new pokemon",
    "description": "",
    "operationId": "addPokemons",
    "consumes": [
    "application/json",
    "application/xml"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "Pokemon that will be added to the database",
    "required": true,
    "schema": {
    "$ref": "#/definitions/PokemonsPost"
    }
    }
    ],
    "responses": {
    "405": {
    "description": "Invalid input"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pokemons",
    "read:pokemons"
    ]
    }
    ]
    },
    "get": {
        "tags": [
        "pokemons"
        ],
        "summary": "Get all pokemons",
        "description": "",
        "operationId": "getAllPokemons",
        "consumes": [
        "application/json",
        "application/xml"
        ],
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "in": "body",
        "name": "body",
        "description": "All pokemons will be shown",
        "required": true,
        "schema": {
        "$ref": "#/definitions/Pokemons"
        }
        }
        ],
        "responses": {
        "405": {
        "description": "Invalid input"
        }
        },
        "security": [
        {
        "petstore_auth": [
        "write:pokemons",
        "read:pokemons"
        ]
        }
        ]
        }
    },
    "/pokemons/{:id}": {
    "get": {
    "tags": [
    "pokemons"
    ],
    "summary": "Find a Pokemon by ID",
    "description": "Returns a single pokemon",
    "operationId": "getPokemonById",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "PokemonId",
    "in": "path",
    "description": "ID of pokemon to return",
    "required": true,
    "type": "uuid",
    "format": "uuid"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/Pokemons"
    }
    },
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Pokemon not found"
    }
    },
    "security": [
    {
    "api_key": []
    }
    ]
    }
    


    
    },
    "/types": {
        "post": {
        "tags": [
        "types"
        ],
        "summary": "Add a new type",
        "description": "",
        "operationId": "addTypes",
        "consumes": [
        "application/json",
        "application/xml"
        ],
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "in": "body",
        "name": "body",
        "description": "Type that will be added to the database",
        "required": true,
        "schema": {
        "$ref": "#/definitions/Types"
        }
        }
        ],
        "responses": {
        "405": {
        "description": "Invalid input"
        }
        },
        "security": [
        {
        "petstore_auth": [
        "write:types",
        "read:types"
        ]
        }
        ]
        },
        "get": {
            "tags": [
            "types"
            ],
            "summary": "Get all types",
            "description": "",
            "operationId": "getAllTypes",
            "consumes": [
            "application/json",
            "application/xml"
            ],
            "produces": [
            "application/json",
            "application/xml"
            ],
            "parameters": [
            {
            "in": "body",
            "name": "body",
            "description": "All types will be shown",
            "required": true,
            "schema": {
            "$ref": "#/definitions/TypesId"
            }
            }
            ],
            "responses": {
            "405": {
            "description": "Invalid input"
            }
            },
            "security": [
            {
            "petstore_auth": [
            "write:types",
            "read:types"
            ]
            }
            ]
            }
        },
        "/types/{:id}": {
    "get": {
    "tags": [
    "types"
    ],
    "summary": "Find a Type by ID",
    "description": "Returns a single type",
    "operationId": "getTypeById",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "TypeId",
    "in": "path",
    "description": "ID of type to return",
    "required": true,
    "type": "integer",
    "format": "int64"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/TypesId"
    }
    },
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Type not found"
    }
    },
    "security": [
    {
    "api_key": []
    }
    ]
    }
    },



    "/types/{:id}/pokemons": {
        "get": {
        "tags": [
        "types"
        ],
        "summary": "Find a Type by ID and display all pokemons with that type",
        "description": "Returns all pokemons an specific that type",
        "operationId": "getPokemonsByType",
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "name": "TypeId",
        "in": "path",
        "description": "ID of type to return",
        "required": true,
        "type": "integer",
        "format": "int64"
        }
        ],
        "responses": {
        "200": {
        "description": "successful operation",
        "schema": {
        "$ref": "#/definitions/Pokemons"
        }
        },
        "400": {
        "description": "Invalid ID supplied"
        },
        "404": {
        "description": "Type not found"
        }
        },
        "security": [
        {
        "api_key": []
        }
        ]
        }
        },





    "/auth/register": {
        "post": {
        "tags": [
        "users"
        ],
        "summary": "Add a new user",
        "description": "",
        "operationId": "addUsers",
        "consumes": [
        "application/json",
        "application/xml"
        ],
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "in": "body",
        "name": "body",
        "description": "User that will be added to the database",
        "required": true,
        "schema": {
        "$ref": "#/definitions/Users"
        }
        }
        ],
        "responses": {
        "405": {
        "description": "Invalid input"
        }
        },
        "security": [
        {
        "petstore_auth": [
        "write:users",
        "read:users"
        ]
        }
        ]
        }
        },
    "/auth/login": {
    "post": {
    "tags": [
    "users"
    ],
    "summary": "Log in a user",
    "description": "",
    "operationId": "logUsers",
    "consumes": [
    "application/json",
    "application/xml"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "The user will be able to log in",
    "required": true,
    "schema": {
    "$ref": "#/definitions/Users"
    }
    }
    ],
    "responses": {
    "405": {
    "description": "Invalid input"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:users",
    "read:users"
    ]
    }
    ]
    }
    },



    "/users": {
        "get": {
            "tags": [
            "users"
            ],
            "summary": "Get all users",
            "description": "",
            "operationId": "getAllUsers",
            "consumes": [
            "application/json",
            "application/xml"
            ],
            "produces": [
            "application/json",
            "application/xml"
            ],
            "parameters": [
            {
            "in": "body",
            "name": "body",
            "description": "All users will be shown",
            "required": true,
            "schema": {
            "$ref": "#/definitions/Users"
            }
            }
            ],
            "responses": {
            "405": {
            "description": "Invalid input"
            }
            },
            "security": [
            {
            "petstore_auth": [
            "write:users",
            "read:users"
            ]
            }
            ]
            }
        },


    "/users/{:id}": {
    "get": {
    "tags": [
    "users"
    ],
    "summary": "Get user by user id",
    "description": "",
    "operationId": "getUserById",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "description": "The id that needs to be fetched.",
    "required": true,
    "type": "string"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/Users"
    }
    },
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "User not found"
    }
    }
    },
    
    "patch": {
    "tags": [
    "users"
    ],
    "summary": "Update user (ADMIN)",
    "description": "This can only be done by an Admin.",
    "operationId": "updateUser",
    "consumes": [
    "application/json"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "description": "ID that need to be updated",
    "required": true,
    "type": "string"
    },
    {
    "in": "body",
    "name": "body",
    "description": "Updated user object",
    "required": true,
    "schema": {
    "$ref": "#/definitions/Users"
    }
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "User not found"
    }
    }
    },
    "delete": {
    "tags": [
    "users"
    ],
    "summary": "Delete user (ADMIN)",
    "description": "This can only be done by an Admin.",
    "operationId": "deleteUser",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "userId",
    "in": "path",
    "description": "The ID that needs to be deleted",
    "required": true,
    "type": "string"
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "User not found"
    }
    }
    }
    },



    "/users/{me}": {
        "get": {
        "tags": [
        "users"
        ],
        "summary": "Get my user",
        "description": "",
        "operationId": "getUserById",
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "name": "userId",
        "in": "path",
        "description": "The ID that needs to be fetched.",
        "required": true,
        "type": "string"
        }
        ],
        "responses": {
        "200": {
        "description": "successful operation",
        "schema": {
        "$ref": "#/definitions/Users"
        }
        },
        "400": {
        "description": "Invalid ID supplied"
        },
        "404": {
        "description": "User not found"
        }
        }
        },
        
        "patch": {
        "tags": [
        "users"
        ],
        "summary": "Update my user",
        "description": "This can only be done by the User.",
        "operationId": "updateUser",
        "consumes": [
        "application/json"
        ],
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "name": "userId",
        "in": "path",
        "description": "ID that need to be updated",
        "required": true,
        "type": "string"
        },
        {
        "in": "body",
        "name": "body",
        "description": "Updated user object",
        "required": true,
        "schema": {
        "$ref": "#/definitions/Users"
        }
        }
        ],
        "responses": {
        "400": {
        "description": "Invalid ID supplied"
        },
        "404": {
        "description": "User not found"
        }
        }
        },
        "delete": {
        "tags": [
        "users"
        ],
        "summary": "Delete my user",
        "description": "This can only be done by the User.",
        "operationId": "deleteUser",
        "produces": [
        "application/json",
        "application/xml"
        ],
        "parameters": [
        {
        "name": "userId",
        "in": "path",
        "description": "The ID that needs to be deleted",
        "required": true,
        "type": "string"
        }
        ],
        "responses": {
        "400": {
        "description": "Invalid ID supplied"
        },
        "404": {
        "description": "User not found"
        }
        }
        }
        }

    },
    "securityDefinitions": {
    "api_key": {
    "type": "apiKey",
    "name": "api_key",
    "in": "header"
    },
    "petstore_auth": {
    "type": "oauth2",
    "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
    "flow": "implicit",
    "scopes": {
    "read:pets": "read your pets",
    "write:pets": "modify pets in your account"
    }
    }
    },
    "definitions": {
    "ApiResponse": {
    "type": "object",
    "properties": {
    "code": {
    "type": "integer",
    "format": "int32"
    },
    "type": {
    "type": "string"
    },
    "message": {
    "type": "string"
    }
    }
    },
    "Types": {
    "type": "object",
    "properties": {
    "name": {
    "type": "string"
    }
    },
    "xml": {
    "name": "Types"
    }
    },
    "TypesId": {
        "type": "object",
        "properties": {
        "id": {
        "type": "integer"
        },
        "name": {
        "type": "string"
        }
        },
        "xml": {
        "name": "Types"
        }
        },
    "Pokemons": {
    "type": "object",
    "required": [
    "id",
    "name",
    "description",
    "evolution",
    "height",
    "weight",
    "image",
    "hp",
    "attack",
    "defense",
    "speed",
    "userId",
    "typeId"
    ],
    "properties": {
        "id": {
            "type": "uuid",
            "example": "uuid"
            },
    "name": {
    "type": "string",
    "example": "K-maleon"
    },

    "description": {
    "type": "string",
    "example": "Kruger Corp pet"
    },

    "evolution": {
    "type": "string",
    "example": "K-Godzilla"
    },
    "height": {
    "type": "integer",
    "example": "10"
    },
    "weight": {
    "type": "integer",
    "example": "20"
    },
    "image": {
    "type": "string",
    "example": "https://krugercorp.com/wp-content/uploads/2022/09/Kmaleon-1-567x1024.png"
    },
    "hp": {
    "type": "integer",
    "example": "200"
    },
    "attack": {
    "type": "integer",
    "example": "200"
    },
    "defense": {
    "type": "integer",
    "example": "200"
    },
    "speed": {
    "type": "integer",
    "example": "200"
    },
    "userId": {
        "$ref": "#/definitions/UsersPokemon"
    },
    "typeId": {
        "$ref": "#/definitions/TypesId"
    }
    },
    "xml": {
    "name": "Pokemon"
    }
    },
    "PokemonsPost": {
        "type": "object",
        "properties": {
        "name": {
        "type": "string",
        "example": "K-maleon"
        },
    
        "description": {
        "type": "string",
        "example": "Kruger Corp pet"
        },
    
        "evolution": {
        "type": "string",
        "example": "K-Godzilla"
        },
        "height": {
        "type": "integer",
        "example": "10"
        },
        "weight": {
        "type": "integer",
        "example": "20"
        },
        "image": {
        "type": "string",
        "example": "https://krugercorp.com/wp-content/uploads/2022/09/Kmaleon-1-567x1024.png"
        },
        "hp": {
        "type": "integer",
        "example": "200"
        },
        "attack": {
        "type": "integer",
        "example": "200"
        },
        "defense": {
        "type": "integer",
        "example": "200"
        },
        "speed": {
        "type": "integer",
        "example": "200"
        }
        },
        "xml": {
        "name": "Pokemon"
        }
        },

    "Users": {
    "type": "object",
    "properties": {

    "firstName": {
    "type": "string"
    },
    "lastName": {
    "type": "string"
    },
    "email": {
    "type": "string"
    },
    "password": {
    "type": "string"
    },
    "phone": {
    "type": "string"
    },
    "birthday": {
    "type": "string"
    }
    },
    "xml": {
    "name": "Users"
    }
    },

"UsersPokemon": {
"type": "object",
"properties": {

"id": {
"type": "uuid",
"example": "uuid"
},
"firstName": {
"type": "string"
},
"lastName": {
"type": "string"
},
"email": {
"type": "string"
}
},
"xml": {
"name": "Users"
}
}
    
    }
    }